classdef Controleur < handle
    % Le controleur est le chef d'orchestre du programme. C'est cette
    % classe qui est chargée d'appeler les méthodes du modèle (traitement
    % des données) et les méthodes de la vue (affichage). (Voir 'patron
    % de conception Modèle Vue Contrôleur' sur internet).
    
    properties
        modele % le modèle s'occupe du traitement des données
        vue % la vue s'occupe de l'affichage
    end
    
    methods
        function soi = Controleur(modele)
            % Constructeur du contrôleur, qui prend le modèle en entrée et
            % qui instancie la vue
            soi.modele = modele;
            soi.vue = Vue(soi);
        end
        
        function charger_volumes_fichier_mat(soi)
            % charge un fichier au format .mat dans le programme
            
            % le modèle instancie un élément de Volumes_fichier_mat
            soi.modele.creer_volumes_fichier_mat;
            
            % On charge les volumes (la fonction de chargement a le même
            % nom mais est implémentée différemment suivant 
            % l'instanciation à la ligne précédente, voir le concept de
            % 'polymorphisme' en programmation orientée objet, sur
            % internet).
            soi.modele.volumes.charger;
        end
        
        function charger_volumes_dossier_mat(soi)
            % charge un dossier composé de fichiers au format .mat 
            % dans le programme
            
            % le modèle instancie un élément de Volumes_dossier_mat
            soi.modele.creer_volumes_dossier_mat;
            
            % On charge les volumes (la fonction de chargement a le même
            % nom mais est implémentée différemment suivant 
            % l'instanciation à la ligne précédente, voir le concept de
            % 'polymorphisme' en programmation orientée objet, sur
            % internet).
            soi.modele.volumes.charger;
        end
        
        function charger_volumes_RawData_bin(soi)
            % charge un dossier, composé de fichiers au format .bin encodés
            % RawData, dans le programme
            
            % le modèle instancie un élément de Volumes_RawData_bin
            soi.modele.creer_volumes_RawData_bin;
            
            % On charge les volumes (la fonction de chargement a le même
            % nom mais est implémentée différemment suivant 
            % l'instanciation à la ligne précédente, voir le concept de
            % 'polymorphisme' en programmation orientée objet, sur
            % internet).
            soi.modele.volumes.charger;
        end
        
        function charger_volumes_VoxelData_bin(soi)
            % charge un dossier, composé de fichiers au format .bin encodés
            % VoxelData, dans le programme
            
            % le modèle instancie un élément de Volumes_VoxelData_bin
            soi.modele.creer_volumes_VoxelData_bin;
            
            % On charge les volumes (la fonction de chargement a le même
            % nom mais est implémentée différemment suivant 
            % l'instanciation à la ligne précédente, voir le concept de
            % 'polymorphisme' en programmation orientée objet, sur
            % internet).
            soi.modele.volumes.charger;
        end
        
        function mettre_a_jour_image_clavier(soi,eventdata)
            % met à jour l'image affichée dans le programme si on appuie
            % sur une touche du clavier (soit une flèche directionnelle
            % pour glisser entre les plans, soit un chiffre pour changer
            % d'orientation du plan)
            
            soi.modele.volumes.mettre_a_jour_image_clavier(eventdata);
        end
        
        function mettre_a_jour_image_bouton(soi,coordonnee_axe3_selectionnee,coordonnee_axe4_selectionnee)
            % met à jour l'image affichée dans le programme si on entre les
            % coordonnées sur l'axe 3 et 4 
            % dans la partie "afficher image" de l'interface graphique
            
            soi.modele.volumes.mettre_a_jour_image_bouton(coordonnee_axe3_selectionnee,coordonnee_axe4_selectionnee);
        end
        
        function selectionner_manuellement_region_interet(soi,coordonnee_axe1_debut,...
    coordonnee_axe1_fin,coordonnee_axe2_debut,coordonnee_axe2_fin)
            % sélectionne une région d'intérêt rectangulaire après avoir
            % entré les coordonnées dans l'interface graphique

            % on instancie une région d'intérêt rectangulaire
            soi.modele.creer_region_interet_rectangle;
            
            % on sélectionne la région d'intérêt
            soi.modele.region_interet.selectionner_manuellement(coordonnee_axe1_debut,...
        coordonnee_axe1_fin,coordonnee_axe2_debut,coordonnee_axe2_fin);
  
        end
        
        function selectionner_visuellement_region_interet_rectangulaire(soi)
            % sélectionne une région d'intérêt rectangulaire après avoir
            % l'avoir tracé sur l'image (après avoir fait clic droit 
            % sur l'image > sélectionner une région d'intérêt > rectangle)
            
            % on instancie une région d'intérêt rectangulaire
            soi.modele.creer_region_interet_rectangle;
            
            % on indique à l'interface que l'on veut effectuer la sélection
            % sur l'image
            soi.vue.choisir_axe_image;
            
            % On sélectionne la région d'intérêt en la traçant sur l'image
            soi.modele.region_interet.selectionner_visuellement;
        end
        
        function selectionner_visuellement_region_interet_polygonale(soi)
            % sélectionne une région d'intérêt polygonale après avoir
            % l'avoir tracé sur l'image (après avoir fait clic droit 
            % sur l'image > sélectionner une région d'intérêt > polygone)
            
            % on instancie une région d'intérêt polygonale
            soi.modele.creer_region_interet_polygone;
            
            % on indique à l'interface que l'on veut effectuer la sélection
            % sur l'image
            soi.vue.choisir_axe_image;
            
            % On sélectionne la région d'intérêt en la traçant sur l'image
            soi.modele.region_interet.selectionner_visuellement;
        end
        
        function calculer_entropie_region_interet(soi)
            % calcule l'entropie globale de la région d'intérêt (sur la
            % matrice de l'image directement, et pas sur une matrice de cooccurrence)
            
            soi.modele.region_interet.calculer_entropie;
        end
        
        function definir_graphique(soi,axe_abscisses_choisi,axe_moyenne_choisi)
            % enregistre dans les paramètres du modèle les propriétés du
            % graphique
            
            % on instancie le graphique
            soi.modele.creer_graphique(axe_abscisses_choisi,axe_moyenne_choisi);
            
            % on enregistre dans les paramètres du modèle les propriétés du
            % graphique
            soi.modele.graphique.definir;
        end
        
        function detecter_pics(soi,taille_fenetre_lissage,nombre_de_pics)
            % détecte le nombre_de_pics souhaités sur la courbe du
            % graphique lissé avec une taille de fenêtre taille_fenetre_lissage
            % (si taille_fenetre_lissage == 1 alors pas de lissage)
            
            % On recalcule le graphique pour éviter que les détection de
            % pics précédentes se superposent
            % Note : cette méthode n'est pas propre et je devrais plutôt
            % avoir créé une fonction de remise à zéro des paramètres
            % propres à la détection de pics (problème récurrent dans mon
            % programme qui se retrouve pour d'autres objets)
            % mais je ne pense pas avoir le temps de le corriger
            soi.modele.graphique.definir;
            
            % On instancie l'objet pics qui fait partie des propriétés du
            % graphique
            soi.modele.graphique.creer_pics;
            
            % Pour l'affichage de la détection de pics on choisit l'axe
            % d'affichage du graphique 
            soi.vue.choisir_axe_affichage_graphique;
            
            % On enlève l'affichage des pics ou combinaison de pics 
            % précédemment détectés (on ne devrait néanmoins pas faire comme ça,
            % et enlever les valeurs dans les paramètres du modèle et pas dans la vue)
            soi.vue.mise_a_un_liste_de_pics;
            soi.vue.mise_a_un_liste_de_combinaisons_de_deux_pics;
            
            % On détecte les pics
            soi.modele.graphique.pics.detecter(taille_fenetre_lissage,nombre_de_pics);
        end
        
        function mettre_a_jour_largeur_a_mi_hauteur_pic_choisi(soi,pic_choisi)
            % Quand on change de pic choisi dans la liste déroulante, on
            % change la valeur de la largeur à mi hauteur du pic choisi
            
            soi.modele.graphique.pics.mettre_a_jour_largeur_a_mi_hauteur_pic_choisi(pic_choisi);
        end
        
        function mettre_a_jour_distance_pic_a_pic_choisie(soi,numero_combinaison_de_deux_pics_choisie)
            % Quand on change de combinaisons de pics choisie 
            % dans la liste déroulante, on
            % change la valeur de la distance pic à pic choisie
            
            soi.modele.graphique.pics.mettre_a_jour_distance_pic_a_pic_choisie(numero_combinaison_de_deux_pics_choisie);
        end
        
        function definir_et_sauvegarder_sous_echantillonnage(soi,facteur_temps_intensite_maximale,facteur_sous_echantillonnage)
            % On definit les paramètres du sous echantillonnage et on le
            % sauvegarde dans un fichier
            
            % On instancie un sous_echantillonnage
            soi.modele.creer_sous_echantillonnage;
            
            % On définit les paramètres du sous-échantillonnage (quels temps
            % sauvegarder)
            soi.modele.sous_echantillonnage.definir(facteur_temps_intensite_maximale,facteur_sous_echantillonnage);
            
            % On sauvegarde les données sous-echantillonnées
            soi.modele.sous_echantillonnage.sauvegarder;
        end
        
        function previsualiser_sous_echantillonnage(soi,facteur_temps_intensite_maximale,facteur_sous_echantillonnage)
            % On calcule les paramètres du sous-echantillonnage sans pour
            % autant sauvegarder le fichier sous-echantillonné : cela
            % permet  à l'utilisateur de rapidement voir comment le
            % sous-echantillonnage a été effectué
            
            % On instancie le sous-echantillonnage
            soi.modele.creer_sous_echantillonnage;
            
            % On définit les paramètre du sous-echantillonnage
            soi.modele.sous_echantillonnage.definir(facteur_temps_intensite_maximale,facteur_sous_echantillonnage);
        end
        
        function exporter_graphique(soi)
            % On enregistre le graphique dans un format image à l'endroit
            % sélectionné par l'utilisateur
            
            soi.modele.graphique.exporter;
        end
        
        function exporter_image(soi)
            % On enregistre l'image ultrasonore affichée 
            % dans un format image à l'endroit sélectionné par l'utilisateur
            
            soi.modele.exporter_image;
        end
        
        function exporter_interface(soi)
            % On enregistre toute l'interface du programme dans un format 
            % image dans fichier dont l'endroit est sélectionné par
            % l'utilisateur
            
            soi.modele.exporter_interface;
        end
        
        function afficher_aide(soi)
            % On affiche l'aide du programme
            
            soi.vue.aide;
        end
        
    end
end

